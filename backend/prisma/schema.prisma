generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  username  String    @unique(map: "uq_user_username") @db.VarChar(40)
  password  String    @db.Char(64)
  createdAt DateTime  @default(now()) @db.DateTime(6)
  updatedAt DateTime  @default(now()) @updatedAt @db.DateTime(6)
  comments  Comment[]
  issues    Issue[]

  @@map("user")
}

model Project {
  id          Int       @id @default(autoincrement())
  key         String    @unique(map: "uq_issue_key") @db.VarChar(10)
  name        String    @db.VarChar(40)
  description String?   @db.Text
  createdAt   DateTime  @default(now()) @db.DateTime(6)
  updatedAt   DateTime  @default(now()) @db.DateTime(6)
  issues      Issue[]
  releases    Release[]

  @@map("project")
}

model Release {
  id        Int      @id @default(autoincrement())
  projectId Int
  name      String   @db.VarChar(40)
  dueDate   DateTime @db.DateTime(0)
  createdAt DateTime @default(now()) @db.DateTime(6)
  updatedAt DateTime @default(now()) @updatedAt @db.DateTime(6)
  issues    Issue[]
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Cascade, map: "fk_release_project_id")

  @@map("release")
}

enum Type {
  bug
  feature

  @@map("issue_type")
}

enum Status {
  todo  @map("to do")
  doing
  done

  @@map("issue_status")
}

model Issue {
  id          Int          @id @default(autoincrement())
  projectId   Int
  releaseId   Int
  authorId    Int
  type        Type
  status      Status       @default(todo)
  priority    Int          @default(0)
  points      Int          @default(0)
  title       String       @db.VarChar(100)
  description String       @db.Text
  createdAt   DateTime     @default(now()) @db.DateTime(6)
  updatedAt   DateTime     @default(now()) @db.DateTime(6)
  attachments Attachment[]
  comments    Comment[]
  author      User         @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade, map: "fk_issue_author_id")
  project     Project      @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Cascade, map: "fk_issue_project_id")
  release     Release      @relation(fields: [releaseId], references: [id], onDelete: Cascade, onUpdate: Cascade, map: "fk_issue_release_id")

  @@map("issue")
}

model Comment {
  id        Int      @id @default(autoincrement())
  issueId   Int
  authorId  Int
  content   String   @db.Text
  createdAt DateTime @default(now()) @db.DateTime(6)
  updatedAt DateTime @default(now()) @updatedAt @db.DateTime(6)
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade, map: "fk_comment_author_id")
  issue     Issue    @relation(fields: [issueId], references: [id], onDelete: Cascade, onUpdate: Cascade, map: "fk_comment_issue_id")

  @@map("comment")
}

model Attachment {
  id        Int      @id @default(autoincrement())
  issueId   Int
  filename  String   @db.VarChar(255)
  filepath  String   @db.VarChar(255)
  mime      String   @db.VarChar(255)
  createdAt DateTime @default(now()) @db.DateTime(6)
  updatedAt DateTime @default(now()) @updatedAt @db.DateTime(6)
  issue     Issue    @relation(fields: [issueId], references: [id], onDelete: Cascade, onUpdate: Cascade, map: "fk_attachment_issue_id")

  @@map("attachment")
}
